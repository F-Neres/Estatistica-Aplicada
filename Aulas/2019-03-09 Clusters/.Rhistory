knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(cluster)){install.packages("cluster")}
if(!require(NbClust)){install.packages("NbClust")}
if(!require(pvclust)){install.packages('pvclust')}
if(!require(igraph)){install.packages('igraph')}
if(!require(igraph)){install.packages('igraph')}
amigos<-read.csv('amigos_edgelist.csv')
amigos_mat<-as.matrix(amigos)
g <- graph.edgelist(amigos_mat, directed = FALSE)
plot(g)
amigos<-read.csv("admigos_adjmat.csv")
rownames(amigos)<-amigos$X
amigos<-dplyr::select(amigos,-X)
amigos_mat<-as.matrix(amigos)
dim(amigos_mat) # tem que estar quadrada (n x n)
g <-  graph.adjacency(amigos_mat, mode="undirected", weighted=NULL)
plot(g)
V(g)
E(g)
paste("edges = ", gsize(g))  # numero de edges
paste("vertices = ", gorder(g)) # numero de vertices
V(g)
E(g)
paste("edges = ", gsize(g))  # numero de edges
paste("vertices = ", gorder(g)) # numero de vertices
genero <- c("M", "F", "F", "M", "M", "M", "F", "M", "M", "F",
"M", "F", "M", "F", "M", "M")
idades <- c(18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20)
# Criar novo atibuto do vértice chamado de 'genero'
g <- set_vertex_attr(g, "genero", value = genero)
# Criar novo atibuto da ligação chamado de 'idade'
g <- set_vertex_attr(g, "idade", value = idades)
# Ver todos os atributos dos vertices em uma lista
vertex_attr(g)
# Ver os primeiros 5 vértices e seus atributos em um data.frame
V(g)[[1:5]]
horas <-c(1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5,
1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4)
# Criar novo atributo da ligação chamado de 'horas'
g <- set_edge_attr(g, "horas", value = horas)
# View edge attributes of graph object
edge_attr(g)
# Encontre todos vértices que incluam "Kaique"
E(g)[[inc('Kaique')]]
# Encontre pares que ficaram mais do que 4 horas juntos
E(g)[[horas>=4]]
neighborhood(g,"Thiago")
neighbors(g,"Thiago")
farthest_vertices(g)
get_diameter(g)
ego(g, 2, "Thiago")
ego(g, 2, "Thiago")
ego(g, 5, "Thiago")
ego(g, 2, "Thiago")
ego(g, 3, "Thiago")
degree(g, mode=c("out"))
betweenness(g, directed = TRUE/FALSE, normalized=TRUE/FALSE)
eigen_centrality(g)
gl <- vector("list", 1000)
for(i in 1:1000){
gl[[i]] <- erdos.rnyi.game(
n = gorder(g),
p.or.m = edge_density(g),
type = "gnp"
}
gl <- vector("list", 1000)
for(i in 1:1000){gl[[i]] <- erdos.rnyi.game(n = gorder(g), p.or.m = edge_density(g), type = "gnp"}
gl <- vector("list", 1000) for(i in 1:1000){gl[[i]] <- erdos.rnyi.game(n = gorder(g), p.or.m = edge_density(g), type = "gnp"}
edge_density(g)
gl[[i]] <- erdos.rnyi.game(
n = gorder(g),
p.or.m = edge_density(g),
type = "gnp"
}
gl[[i]] <- erdos.rnyi.game(n = gorder(g), p.or.m = edge_density(g), type = "gnp"}
erdos.rnyi.game(n = gorder(g), p.or.m = edge_density(g), type = "gnp"}
erdos.renyi.game(n = gorder(g), p.or.m = edge_density(g), type = "gnp"
erdos.renyi.game(n = gorder(g), p.or.m = edge_density(g), type = 'gnp'
erdos.renyi.game(n = gorder(g), p.or.m = edge_density(g), type = 'gnp')
gl <- vector("list", 1000)
for(i in 1:1000){gl[[i]] <- erdos.renyi.game(n = gorder(g), p.or.m = edge_density(g), type = 'gnp')}
hist(gl.apls, breaks = 20)
