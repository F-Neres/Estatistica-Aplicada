tablda <- table(classiflda, treinoaval$classmpg)
tablda
acurlda <- (tablda[1,1] + tablda[2,2])/sum(tablda)
acurlda
fit <- quaDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classidqda <- classify(fit, newdata = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tabqda <- table(classidqda, treinoaval$classmpg)
tabqda
acurqda <- (tabqda[1,1] + tabqda[2,2])/sum(tabqda)
acurqda
fit <- linDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classiflda <- classify(fit, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tablda <- table(classiflda, testeaval$classmpg)
tablda
acurlda <- (tablda[1,1] + tablda[2,2])/sum(tablda)
acurlda
fit <- quaDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classidqda <- classify(fit, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tabqda <- table(classidqda, testeaval$classmpg)
tabqda
acurqda <- (tabqda[1,1] + tabqda[2,2])/sum(tabqda)
acurqda
knitr::opts_chunk$set(echo = TRUE)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[, -1])
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval)
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$LO3)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval)
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
tablgr
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[,1:6])
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[,1:6])
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
tablgr
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
prob_posteriori
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
treinoaval$classmpg <- as.numeric(treinoaval$classmpg)
testeaval$classmpg <- as.numeric(testeaval$classmpg)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
testeaval$classmpg
treinoaval$classmpg <- as.numeric(treinoaval$classmpg -1)
testeaval$classmpg <- as.numeric(testeaval$classmpg -1)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[,1:6])
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
tablgr
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
acurlrg
testeaval$classmpg
treinoaval$classmpg <- as.logic(treinoaval$classmpg -1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ISLR")
summary(Auto)
install.packages("ISLR")
install.packages("foreign")
install.packages("MASS")
install.packages("dplyr")
install.packages("biotools")
install.packages("DiscriMiner")
install.packages("ggplot2")
install.packages("mvnormtest")
library(ISLR)
library(foreign)
library(MASS)
library(dplyr)
library(biotools)
library(DiscriMiner)
library(ggplot2)
library(mvnormtest)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
summary(Auto)
library(ISLR)
library(foreign)
library(MASS)
library(dplyr)
library(biotools)
library(DiscriMiner)
library(ggplot2)
library(mvnormtest)
summary(Auto)
avaldata <- Auto[,-1]
avaldata <- avaldata[,-8]
avaldata$origin <- as.factor(avaldata$origin)
scaleavaldata <- avaldata[,-7]
scaleavaldata <- as.data.frame(scale(scaleavaldata))
classmpg <- as.numeric(Auto$mpg>median(Auto$mpg))
avaldata$classmpg <- as.factor(classmpg)
scaleavaldata$origin <- avaldata$origin
scaleavaldata$classmpg <- avaldata$classmpg
boxplot(avaldata$cylinders ~ avaldata$classmpg, main='Cilindros')
boxplot(avaldata$displacement ~ avaldata$classmpg, main='Deslocamento do Motor')
boxplot(avaldata$horsepower ~ avaldata$classmpg, main='Potência')
boxplot(avaldata$weight ~ avaldata$classmpg, main='Peso')
boxplot(avaldata$acceleration ~ avaldata$classmpg, main='Aceleração')
boxplot(avaldata$year ~ avaldata$classmpg, main='Ano')
aggregate(avaldata[,1:6], list(avaldata$classmpg), quantile)
set.seed(8)
treinoaval <- scaleavaldata[sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
testeaval <- scaleavaldata[-sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
table(scaleavaldata$classmpg)
table(treinoaval$classmpg)
table(testeaval$classmpg)
mshapiro.test(t(scaleavaldata[,1:6]))
shapiro.test(scaleavaldata$cylinders)
shapiro.test(scaleavaldata$displacement)
shapiro.test(scaleavaldata$horsepower)
shapiro.test(scaleavaldata$weight)
shapiro.test(scaleavaldata$acceleration)
shapiro.test(scaleavaldata$year)
boxM(data = scaleavaldata[,1:6], grouping = scaleavaldata$classmpg)
discPower(variables = treinoaval[,1:6], group = treinoaval$classmpg)
discrim_aval <- desDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
discrim_aval$discrivar
discrim_aval$values
discrim_aval$discor
summary(aov(discrim_aval$scores ~ treinoaval$classmpg), test="Wilks")
treinoaval$DF1 <- discrim_aval$scores
treinoaval %>% group_by(classmpg) %>% summarise(C = mean(DF1))
treinoaval$random <- rnorm(294,mean=0,sd=10)
library(ggplot2)
ggplot(data = treinoaval, aes(x = DF1, y = random, colour = classmpg)) +
geom_hline(yintercept = 0, colour="gray70") +
geom_vline(xintercept = 0, colour="gray70") +
geom_point()
fitlda <- linDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classiflda <- classify(fitlda, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tablda <- table(classiflda, testeaval$classmpg)
tablda
acurlda <- (tablda[1,1] + tablda[2,2])/sum(tablda)
acurlda
fitqda <- quaDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classidqda <- classify(fitqda, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tabqda <- table(classidqda, testeaval$classmpg)
tabqda
acurqda <- (tabqda[1,1] + tabqda[2,2])/sum(tabqda)
acurqda
treinoaval$classmpg <- as.logical(treinoaval$classmpg -1)
testeaval$classmpg <- as.logical(testeaval$classmpg -1)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
set.seed(8)
treinoaval <- scaleavaldata[sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
testeaval <- scaleavaldata[-sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
treinoaval$classmpg <- as.logical(treinoaval$classmpg)
testeaval$classmpg <- as.logical(testeaval$classmpg)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
treinoaval$classmpg <- as.numeric(treinoaval$classmpg -1)
testeaval$classmpg <- as.numeric(testeaval$classmpg -1)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
treinoaval$classmpg <- as.numeric(treinoaval$classmpg -1)
testeaval$classmpg <- as.numeric(testeaval$classmpg -1)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
treinoaval$classmpg
treinoaval$classmpg <- as.numeric(treinoaval$classmpg -1)
testeaval$classmpg <- as.numeric(testeaval$classmpg -1)
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
table(scaleavaldata$classmpg)
table(treinoaval$classmpg)
table(testeaval$classmpg)
set.seed(8)
treinoaval <- scaleavaldata[sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
testeaval <- scaleavaldata[-sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
table(scaleavaldata$classmpg)
table(treinoaval$classmpg)
table(testeaval$classmpg)
treinoaval$classmpg <- as.numeric(treinoaval$classmpg) -1
testeaval$classmpg <- as.numeric(testeaval$classmpg) -1
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg) #Regra de classificação proporcional
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[,1:6])
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
tablgr
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
acurlrg
treinoaval$classmpg <- as.factor(treinoaval$classmpg)
testeaval$classmpg <- as.factor(testeaval$classmpg)
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
library(rpart)
# Ajustar a árvore:
fitdtr <- rpart(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
method="class", data = treinoaval)
fitdtr
# poda:
melhorCp = fitdtr$cptable[which.min(fitdtr$cptable[,"xerror"]),"CP"]
melhorCp
#melhor cp via validação cruzada:
pfit <- prune(fitdtr, cp = melhorCp)
pfit
# plotar árvore podada
plot(pfit)
text(pfit,use.n=FALSE,all=FALSE,cex=1.5)
dev.off()
# Classificação
classifdtr <- predict(pfit, doenca_teste[,-1], type = 'class')
set.seed(0)
library(rpart)
# Ajustar a árvore:
fitdtr <- rpart(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin,
method="class", data = treinoaval)
fitdtr
# poda:
melhorCp = fitdtr$cptable[which.min(fitdtr$cptable[,"xerror"]),"CP"]
melhorCp
#melhor cp via validação cruzada:
pfit <- prune(fitdtr, cp = melhorCp)
pfit
# plotar árvore podada
plot(pfit)
text(pfit,use.n=FALSE,all=FALSE,cex=1.5)
dev.off()
# Classificação
classifdtr <- predict(pfit, testeaval[,1:7], type = 'class')
tabdtr <- table(classifdtr, testeaval$classmpg)
acurdtr <- (tabdtr[1,1] + tabdtr[2,2])/sum(tabdtr)
acurdtr
set.seed(0)
library(rpart)
# Ajustar a árvore:
fitdtr <- rpart(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin,
method="class", data = treinoaval)
fitdtr
# poda:
melhorCp = fitdtr$cptable[which.min(fitdtr$cptable[,"xerror"]),"CP"]
melhorCp
#melhor cp via validação cruzada:
pfit <- prune(fitdtr, cp = melhorCp)
pfit
# plotar árvore podada
plot(pfit)
text(pfit,use.n=FALSE,all=FALSE,cex=1.5)
dev.off()
# Classificação
classifdtr <- predict(pfit, testeaval[,1:7], type = 'class')
tabdtr <- table(classifdtr, testeaval$classmpg)
tabdtr
acurdtr <- (tabdtr[1,1] + tabdtr[2,2])/sum(tabdtr)
acurdtr
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
library(rpart)
# Ajustar a árvore:
fit <- rpart(LO3 ~ ANGEST + AH + IMP + TRIGS + COLS + IDADE1 + SEXO,
method="class", data = doenca_treino)
library(class)
ajuste = knn(train = doenca_treino[,-1], test = doenca_teste[,-1],
cl = doenca_treino$LO3, k = 50)
library(class)
fitknn = knn(train = treinoaval[,1:7], test = testeaval[,1:7],
cl = treinoaval$classmpg, k = 30)
tabknn <- table(fitknn, testeaval$classmpg)
acurknn <- (tabknn[1,1] + tabknn[2,2])/sum(tabknn)
acurknn
library(class)
fitknn = knn(train = treinoaval[,1:7], test = testeaval[,1:7],
cl = treinoaval$classmpg, k = 30)
tabknn <- table(fitknn, testeaval$classmpg)
tabknn
acurknn <- (tabknn[1,1] + tabknn[2,2])/sum(tabknn)
acurknn
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ISLR")
install.packages("foreign")
install.packages("MASS")
install.packages("dplyr")
install.packages("biotools")
install.packages("dplyr")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
summary(Auto)
library(ISLR)
library(foreign)
library(MASS)
library(dplyr)
library(biotools)
library(DiscriMiner)
library(ggplot2)
library(mvnormtest)
summary(Auto)
avaldata <- Auto[,-1]
avaldata <- avaldata[,-8]
avaldata$origin <- as.factor(avaldata$origin)
scaleavaldata <- avaldata[,-7]
scaleavaldata <- as.data.frame(scale(scaleavaldata))
classmpg <- as.numeric(Auto$mpg>median(Auto$mpg))
avaldata$classmpg <- as.factor(classmpg)
scaleavaldata$origin <- avaldata$origin
scaleavaldata$classmpg <- avaldata$classmpg
boxplot(avaldata$cylinders ~ avaldata$classmpg, main='Cilindros')
boxplot(avaldata$displacement ~ avaldata$classmpg, main='Deslocamento do Motor')
boxplot(avaldata$horsepower ~ avaldata$classmpg, main='Potência')
boxplot(avaldata$weight ~ avaldata$classmpg, main='Peso')
boxplot(avaldata$acceleration ~ avaldata$classmpg, main='Aceleração')
boxplot(avaldata$year ~ avaldata$classmpg, main='Ano')
aggregate(avaldata[,1:6], list(avaldata$classmpg), quantile)
set.seed(8)
treinoaval <- scaleavaldata[sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
testeaval <- scaleavaldata[-sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
?if
of?
?if
?If
If??
If?
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(foreign)
library(MASS)
library(dplyr)
library(biotools)
library(DiscriMiner)
library(ggplot2)
library(mvnormtest)
summary(Auto)
avaldata <- Auto[,-1]
avaldata <- avaldata[,-8]
avaldata$origin <- as.factor(avaldata$origin)
scaleavaldata <- avaldata[,-7]
scaleavaldata <- as.data.frame(scale(scaleavaldata))
classmpg <- as.numeric(Auto$mpg>median(Auto$mpg))
avaldata$classmpg <- as.factor(classmpg)
scaleavaldata$origin <- avaldata$origin
scaleavaldata$classmpg <- avaldata$classmpg
boxplot(avaldata$cylinders ~ avaldata$classmpg, main='Cilindros')
boxplot(avaldata$displacement ~ avaldata$classmpg, main='Deslocamento do Motor')
boxplot(avaldata$horsepower ~ avaldata$classmpg, main='Potência')
boxplot(avaldata$weight ~ avaldata$classmpg, main='Peso')
boxplot(avaldata$acceleration ~ avaldata$classmpg, main='Aceleração')
boxplot(avaldata$year ~ avaldata$classmpg, main='Ano')
aggregate(avaldata[,1:6], list(avaldata$classmpg), quantile)
set.seed(8)
treinoaval <- scaleavaldata[sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
testeaval <- scaleavaldata[-sample(nrow(scaleavaldata),  size = nrow(scaleavaldata) * 0.75),]
table(scaleavaldata$classmpg)
table(treinoaval$classmpg)
table(testeaval$classmpg)
cor(scaleavaldata[,1:6])
mshapiro.test(t(scaleavaldata[,1:6]))
shapiro.test(scaleavaldata$cylinders)
shapiro.test(scaleavaldata$displacement)
shapiro.test(scaleavaldata$horsepower)
shapiro.test(scaleavaldata$weight)
shapiro.test(scaleavaldata$acceleration)
shapiro.test(scaleavaldata$year)
boxM(data = scaleavaldata[,1:6], grouping = scaleavaldata$classmpg)
discPower(variables = treinoaval[,1:6], group = treinoaval$classmpg)
discrim_aval <- desDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
discrim_aval$discrivar
discrim_aval$values
discrim_aval$discor
summary(aov(discrim_aval$scores ~ treinoaval$classmpg), test="Wilks")
treinoaval$DF1 <- discrim_aval$scores
treinoaval %>% group_by(classmpg) %>% summarise(C = mean(DF1))
treinoaval$random <- rnorm(294,mean=0,sd=10)
library(ggplot2)
ggplot(data = treinoaval, aes(x = DF1, y = random, colour = classmpg)) +
geom_hline(yintercept = 0, colour="gray70") +
geom_vline(xintercept = 0, colour="gray70") +
geom_point()
fitlda <- linDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classiflda <- classify(fitlda, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tablda <- table(classiflda, testeaval$classmpg)
tablda
acurlda <- (tablda[1,1] + tablda[2,2])/sum(tablda)
acurlda
fitqda <- quaDA(variables = treinoaval[, c("displacement", "horsepower", "weight", "acceleration", "year")],
group = treinoaval$classmpg)
classidqda <- classify(fitqda, newdata = testeaval[, c("displacement", "horsepower", "weight", "acceleration", "year")])$pred_class
tabqda <- table(classidqda, testeaval$classmpg)
tabqda
acurqda <- (tabqda[1,1] + tabqda[2,2])/sum(tabqda)
acurqda
treinoaval$classmpg <- as.numeric(treinoaval$classmpg) -1
testeaval$classmpg <- as.numeric(testeaval$classmpg) -1
fitlgr <- glm(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year,
family = binomial(link = 'logit'), data = treinoaval)
fitlgr
p <- mean(treinoaval$classmpg)
p
log_chances <- predict.glm(fitlgr, newdata = testeaval[,1:6])
prob_posteriori <- exp(log_chances)/(1+exp(log_chances))
prob_posteriori
classiflgr <- ifelse(prob_posteriori > p, 1, 0)
classiflgr
tablgr <- table(classiflgr, testeaval$classmpg)
tablgr
acurlrg <- (tablgr[1,1] + tablgr[2,2])/sum(tablgr)
acurlrg
treinoaval$classmpg <- as.factor(treinoaval$classmpg)
testeaval$classmpg <- as.factor(testeaval$classmpg)
set.seed(0)
library(rpart)
# Ajustar a árvore:
fitdtr <- rpart(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin,
method="class", data = treinoaval)
fitdtr
# poda:
melhorCp = fitdtr$cptable[which.min(fitdtr$cptable[,"xerror"]),"CP"]
melhorCp
#melhor cp via validação cruzada:
pfit <- prune(fitdtr, cp = melhorCp)
pfit
# plotar árvore podada
plot(pfit)
text(pfit,use.n=FALSE,all=FALSE,cex=1.5)
# Classificação
classifdtr <- predict(pfit, testeaval[,1:7], type = 'class')
tabdtr <- table(classifdtr, testeaval$classmpg)
tabdtr
acurdtr <- (tabdtr[1,1] + tabdtr[2,2])/sum(tabdtr)
acurdtr
set.seed(0)
library(rpart)
fitdtr <- rpart(classmpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin,
method="class", data = treinoaval)
fitdtr
melhorCp = fitdtr$cptable[which.min(fitdtr$cptable[,"xerror"]),"CP"]
melhorCp
pfit <- prune(fitdtr, cp = melhorCp)
pfit
plot(pfit)
text(pfit,use.n=FALSE,all=FALSE,cex=1.5)
classifdtr <- predict(pfit, testeaval[,1:7], type = 'class')
tabdtr <- table(classifdtr, testeaval$classmpg)
tabdtr
acurdtr <- (tabdtr[1,1] + tabdtr[2,2])/sum(tabdtr)
acurdtr
discPower(variables = treinoaval[,1:6], group = treinoaval$classmpg)
